package flow;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.vis.club.mahindra.api.model.InformationAvail;
import org.vis.club.mahindra.api.model.MemberDetailInformation;
import org.vis.club.mahindra.api.model.MemberResponse;
import org.vis.club.mahindra.api.model.UserLanguage;
import org.vis.club.mahindra.api.model.UserReporting;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-14  05:29:39 PM
 */
public class SetProperties extends com.avaya.sce.runtime.BasicServlet {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-NOV-14
	 * 05:29:39 PM
	 */
	public SetProperties() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components. You may
	 * use Java for sophisticated logic or to integrate with custom connectors (i.e.
	 * JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent
	 * delays. It's important to design your callflow so that the voice browser
	 * (Experienve Portal/IR) is not waiting too long for a response as this can
	 * lead to a poor caller experience. Additionally, if the response to the client
	 * voice browser exceeds the configured timeout, the platform may throw an
	 * "error.badfetch".
	 *
	 * Using this method, you have access to all session variables through the
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future. Last
	 * generated by Orchestration Designer at: 2022-NOV-14 05:29:39 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!

//		String tempaudio="04122023";
//		
//		mySession
//		.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_TEMP).setValue(tempaudio);
//
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Member Details Response | tempaudio: " + tempaudio);

		getMemberDetails(mySession);

		setVDN(mySession);

		setReporting(mySession);

	}

	private void setReporting(SCESession mySession) {
		UserReporting userReporting = new UserReporting();

		String mobile_number = mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();

		userReporting.setMobile_number(mobile_number);

		String ucid = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID)
				.getStringValue();

		userReporting.setUcid(ucid);
		userReporting.setStart_time(new Date());

		mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT)
				.setValue(userReporting);

	}

	private void setVDN(SCESession mySession) {
		String config = getServletContext().getInitParameter("Configuration");
		try {
			Properties properties = loadPropertyFile(config);

			String acctInfoLoy = properties.getProperty("ACCT_INFO_LOYALITY_POINTS");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_ACCT__INFO__LOYALITY__POINTS).setValue(acctInfoLoy);

			String acctInfoRCI = properties.getProperty("ACCT_INFO_RCI_NIGHTS");
			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_ACCT__INFO__RCI__NIGHTS).setValue(acctInfoRCI);

			String acctInfoRCIPoints = properties.getProperty("ACCT_INFO_RCP_POINTS");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_ACCT__INFO__RCP__POINTS).setValue(acctInfoRCIPoints);

			String acctInfoRetry = properties.getProperty("ACCT_INFO_RETIRES_EXCEEDED");
			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_ACCT__INFO__RETIRES__EXCEEDED).setValue(acctInfoRetry);

			String bkgCancelAPIFailed = properties.getProperty("BOOKING_CANCEL_API_FAILED");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_BOOKING__CANCEL__API__FAILED).setValue(bkgCancelAPIFailed);

			String bkgCancelRetryFailed = properties.getProperty("BOOKING_CANCEL_RETIRES_eXCEEDED");

			mySession
					.getVariableField(IProjectVariables.EXIT_VDN,
							IProjectVariables.EXIT_VDN_FIELD_BOOKING__CANCEL__RETIRES__E_XCEEDED)
					.setValue(bkgCancelRetryFailed);

			String dayBalanceAPIFailed = properties.getProperty("DAY_BALANCE_API_FAILED");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_DAY__BALANCE__API__FAILED).setValue(dayBalanceAPIFailed);

			String exitSpeakExec = properties.getProperty("EXIT_SPEAK_EXECUTIVE");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_EXIT__SPEAK__EXECUTIVE).setValue(exitSpeakExec);

			String mngWL = properties.getProperty("MANAGE_WAITLIST");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_EXIT__SPEAK__EXECUTIVE).setValue(mngWL);

			String menu1 = properties.getProperty("MENU1");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_MENU_1)
					.setValue(menu1);

			String menu2 = properties.getProperty("MENU2");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_MENU_2)
					.setValue(menu2);

			String modOrCancel = properties.getProperty("MOD_OR_CANCEL");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_MOD__OR__CANCEL)
					.setValue(modOrCancel);

			String nonRMN = properties.getProperty("NONRMN");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_NONRMN)
					.setValue(nonRMN);

			String premierMember = properties.getProperty("PREMIER_MEMBER");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_PREMIER__MEMBER)
					.setValue(premierMember);

			String wlCancel = properties.getProperty("WL_CANCEL_FAILED");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_WL__CANCEL__FAILED)
					.setValue(wlCancel);

			String wlCancelRetriesExceeded = properties.getProperty("WL_CANCEL_RETRIES_EXCEEDED");

			mySession
					.getVariableField(IProjectVariables.EXIT_VDN,
							IProjectVariables.EXIT_VDN_FIELD_WL__CANCEL__RETRIES__EXCEEDED)
					.setValue(wlCancelRetriesExceeded);

			String wlMod = properties.getProperty("WL_MODIFY");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_WL__MODIFY)
					.setValue(wlMod);

			String wlRetries = properties.getProperty("WL_RETRIES");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_WL__RETRIES)
					.setValue(wlRetries);

			String offerExitVDN = properties.getProperty("OFFER_EXIT");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_OFFER__EXIT)
					.setValue(offerExitVDN);

			String exitEngVDNPrefix = properties.getProperty("EXIT_ENG_VDN_PREFIX");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_EXIT__ENG__VDN__PREFIX).setValue(exitEngVDNPrefix);

			String exitHindiVDNPrefix = properties.getProperty("EXIT_HIN_VDN_PREFIX");

			mySession.getVariableField(IProjectVariables.EXIT_VDN,
					IProjectVariables.EXIT_VDN_FIELD_EXIT__HIN__VDN__PREFIX).setValue(exitHindiVDNPrefix);

			String bkgModVDNPrefix = properties.getProperty("BOOKING_MOD");

			mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_BOOKING__MOD)
					.setValue(bkgModVDNPrefix);

			String ModCanAPIFailedVDNPrefix = properties.getProperty("MOD_OR_CANCEL_API_FAILED");

			mySession
					.getVariableField(IProjectVariables.EXIT_VDN,
							IProjectVariables.EXIT_VDN_FIELD_MOD__OR__CANCEL__API__FAILED)
					.setValue(ModCanAPIFailedVDNPrefix);

//			 String bkgModAPIFailedVDNPrefix = properties.getProperty("MOD_OR_CANCEL_API_FAILED");
//			 
//			 mySession.getVariableField(IProjectVariables.EXIT_VDN,
//						IProjectVariables.EXIT_VDN_FIELD_MOD__OR__CANCEL__API__FAILED)
//				.setValue(bkgModAPIFailedVDNPrefix);

		} catch (Exception e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Exception while setting EXIT VDN: " + e);
		}

	}

	private void getMemberDetails(com.avaya.sce.runtimecommon.SCESession mySession) {
		String propertiesLocation = getServletContext().getInitParameter("ENG-PROPERTIES_LOCATION");
		String config = getServletContext().getInitParameter("Configuration");
		try {
			Properties properties = loadPropertyFile(config);

			mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_PROPERTY_LOCATION)
					.setValue(propertiesLocation);

//			String DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS)
//					.getStringValue();

			String ani = properties.getProperty("ANI_VALUE");

			if (ani != null && !ani.isEmpty()) {
				mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
						.setValue(ani);
			}
			ani = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
					.getStringValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "ANI: " + ani);

			// member details
			MemberResponse memberDetails = getMemberDetails(ani, mySession, properties);

			String responseMessage = memberDetails.getResponseMessage();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Member Details Response: " + responseMessage);
			
//			UserReporting userReporting = (UserReporting) mySession.getVariableField(IProjectVariables.MAIN,
//					IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT).getObjectValue();
			
			if (responseMessage != null && responseMessage.equalsIgnoreCase("success")
					&& !memberDetails.getMembers().isEmpty()) {

				mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_REGISTERED)
						.setValue(true);
//				userReporting.setRegister_user(InformationAvail.Y.name());
				
				
				if (memberDetails.getMembers().get(0).getProductName().equalsIgnoreCase("Purple")
						|| memberDetails.getMembers().get(0).getProductName().equalsIgnoreCase("Red 2BR")) {
					mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_PREMIER)
							.setValue(true);
//					userReporting.setPremier_member(InformationAvail.Y.name());
				} else {
//					userReporting.setPremier_member(InformationAvail.N.name());
				}

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_CONTRACT_ID)
						.setValue(memberDetails.getMembers().get(0).getContractId());
				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_DOB)
						.setValue(memberDetails.getMembers().get(0).getMemberDOB());
				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_SHIP_ID)
						.setValue(memberDetails.getMembers().get(0).getMemberShipId());
				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
						.setValue(memberDetails.getMembers().get(0).getMemberId());

				String asfDue = memberDetails.getMembers().get(0).getAsfDue();

				mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
						IProjectVariables.MEMBER_DETAILS_FIELD_ASF__DUE).setValue(asfDue);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "ASF DUE: " + asfDue);

				String emiDue = memberDetails.getMembers().get(0).getEmiDue();
				mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
						IProjectVariables.MEMBER_DETAILS_FIELD_EMI__DUE).setValue(emiDue);

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "EMI DUE: " + emiDue);

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_COMPLIMENTARY_NIGHTS)
						.setValue(memberDetails.getMembers().get(0).getComplimentaryNights());

			} else {
//				userReporting.setRegister_user(InformationAvail.Y.name());
				mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_REGISTERED)
						.setValue(false);
				mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_PREMIER)
						.setValue(false);
			}

			// get User selected language

//			UserLanguage userSelectedLanguage = getUserSelectedLanguage(DNIS, mySession, properties);
//			
//			String language = userSelectedLanguage.getLanguage();
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"User Language : " + language);
//
//			if (language!=null) {
//				mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME)
//				.setValue(true);
//			} else {
//				mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME)
//				.setValue(false);
//			}
			
//			mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT)
//			.setValue(userReporting);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private UserLanguage getUserSelectedLanguage(String dNIS, SCESession mySession, Properties properties) {

		BufferedReader rd = null;
		UserLanguage userLanguage = null;
		Gson gson = new Gson();

		String info = "";
		String jsonResponse = "";
		try {
//			Properties properties = loadPropertyFile();
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty(AppConstant.LOCALHOST_URL)
					.concat(properties.getProperty(AppConstant.LOCALHOST_APP_NAME));

			String userLangURL = appURL.concat(properties.getProperty(AppConstant.USER_LANGUAGE_URL));

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MobileNumber DNIS: " + dNIS);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "URL: " + userLangURL);

			HttpPost post = new HttpPost(userLangURL);

			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();

			nameValuePairs.add(new BasicNameValuePair(AppConstant.MOBILE_NUMBER, dNIS));

			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			userLanguage = gson.fromJson(jsonResponse, UserLanguage.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "userLanguage: " + userLanguage);
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While Getting the details of User selected lang " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exception While Closing Buffered Reader " + e);
			}
		}
		return userLanguage;

	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:25 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Welcome", 0, true, "Default");
		list.add(aGoto);

		return list;
	}

	public MemberResponse getMemberDetails(String mobileNumber, SCESession mySession, Properties properties) {

		BufferedReader rd = null;
		MemberResponse memberInformation = null;
		Gson gson = new Gson();

		String info = "";
		String jsonResponse = "";
		try {
//			Properties properties = loadPropertyFile();
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));
			String MemberDetailURL = appURL.concat(properties.getProperty("member_details_url"));

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MobileNumber: " + mobileNumber);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "URL: " + MemberDetailURL);

			HttpPost post = new HttpPost(MemberDetailURL);

			post.addHeader("Content-Type", "application/json");

			MemberDetailInformation mdi=new MemberDetailInformation();
			mdi.setMobileNumber(mobileNumber);
			
			String json = gson.toJson(mdi);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Member Details request: " + json);
			StringEntity stringEntity=new StringEntity(json);			

//			StringEntity stringEntity = new StringEntity(
//					"{\n" + "    \"MobileNumber\": \"" + mobileNumber + "\"\n" + "}");
			
			
			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Response of Member Details" + jsonResponse);
			
			memberInformation = gson.fromJson(jsonResponse, MemberResponse.class);
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "API response:-" + memberInformation);
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While Getting the details of Member Details " + e);
		}
		return memberInformation;
	}

	/**
	 * @param config
	 * @return
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}

	public static byte[] encrypt(byte[] input, Key secretKey, IvParameterSpec ivParameterSpec)
			throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException,
			IllegalBlockSizeException, InvalidAlgorithmParameterException {
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);
		byte[] encrypted = cipher.doFinal(input);
		return encrypted;
	}

	public static byte[] decrypt(byte[] encryptedInput, Key secretKey, IvParameterSpec ivParameterSpec)
			throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException,
			IllegalBlockSizeException, InvalidAlgorithmParameterException {
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec);
		byte[] decryptedInput = cipher.doFinal(encryptedInput);
		System.out.println("decrypted input bytes: " + decryptedInput);

		return decryptedInput;
	}

	public static Key getSecretKey() throws NoSuchAlgorithmException {
		KeyGenerator aes = KeyGenerator.getInstance("AES");
		aes.init(192);
		Key secretKey = aes.generateKey();
		System.out.println("encoded : " + secretKey.getEncoded());
		return secretKey;
	}

	public static IvParameterSpec getIvParameterSpec() throws NoSuchAlgorithmException {
		SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
		byte[] random = new byte[16];
		secureRandom.nextBytes(random);
		IvParameterSpec ivParameterSpec = new IvParameterSpec(random);
		return ivParameterSpec;
	}

}
