package flow.subflow.DaysBalance;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.vis.club.mahindra.api.model.CancelBookingResponse;
import org.vis.club.mahindra.api.model.DaysBalanceResponse;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.google.gson.Gson;

import flow.AppConstant;
import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-DEC-05  11:47:59 AM
 */
public class CRESTDaysBalance extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-DEC-05  11:47:59 AM
	 */
	public CRESTDaysBalance() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-DEC-05  11:47:59 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		cancelTheBooking(mySession);

	}
	
	
	private void cancelTheBooking(com.avaya.sce.runtimecommon.SCESession mySession) {
		BufferedReader rd = null;
		DaysBalanceResponse daysBalanceResponse = null;
		Gson gson = new Gson();

		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");

			Properties properties = loadPropertyFile(config);
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));
			String daysBalURL = appURL.concat(properties.getProperty("days_balance_url"));
			
			String memberID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
					.getStringValue();
			String contractID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_CONTRACT_ID)
					.getStringValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"DAYS booking | memberID : " + memberID);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "DAYS booking | contractID : " + contractID);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "DAYS booking | URL: " + daysBalURL);

			HttpPost post = new HttpPost(daysBalURL);
			post.addHeader("Content-Type", "application/json");

//			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
//
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.MEMEBER_ID, memberID));
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.CONTRACT_ID, contractID));

//			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			

			StringEntity stringEntity = new StringEntity("{\n" + 
					"			    \"MemberID\":\""+memberID+"\",\n" + 
					"			    \"ContractID\":\""+contractID+"\"\n" + 
					"			}");
			post.setEntity(stringEntity);
			
			
			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			daysBalanceResponse = gson.fromJson(jsonResponse, DaysBalanceResponse.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Days BALANCE Response | daysBalanceResponse" + daysBalanceResponse);
			if (daysBalanceResponse!=null && 
					daysBalanceResponse.getResponseMessage()!= null && daysBalanceResponse.getResponseMessage()
					.equalsIgnoreCase("success")) {
				
				String regularNights="";
				
				
				
				if (daysBalanceResponse.getGetdaybalance()!=null) {
					regularNights = daysBalanceResponse.getGetdaybalance().get(0).getRegularNights();
					
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Days BALANCE Response | daysbalance |regularNights" + regularNights);
				
					String daysbalance = properties.getProperty("DAY_BAL");
					
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Days BALANCE Response | daysbalance from prop" + daysbalance);
					
					if (properties.containsKey("DAY_BAL") && daysbalance!=null) {
						regularNights=daysbalance;
					}
					
					
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Days BALANCE Response | daysBalanceResponse | regularNights->" + regularNights);
					
					double rnDays = Double.parseDouble(regularNights);
										
					mySession
					.getVariableField(IProjectVariables.DAYS_BALANCE,
							IProjectVariables.DAYS_BALANCE_FIELD_BALANCE)
					.setValue(rnDays);
					
					Long days = Math.round(rnDays);
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Days BALANCE Response | daysBalanceResponse | days " + days);
					
					
					if (days<3) {
						String lessthan3Ann = "CMH40001_1.wav*SS:" + days + ":number*CMH40001_3.wav" + "*CMH40002.wav";
						mySession
								.getVariableField(IProjectVariables.DAYS_BALANCE,
										IProjectVariables.DAYS_BALANCE_FIELD_LESS_THAN_3ANN)
								.setValue(lessthan3Ann);
						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Days BALANCE Response | daysBalanceResponse | regularNights < 3 " + regularNights);
						
					} else if (days>=21) {
						
						String moreThan21Ann="CMH40001_1.wav*SS:" + days + ":number*CMH40001_3.wav*"
								+"CMH40005.wav";
						mySession
						.getVariableField(IProjectVariables.DAYS_BALANCE,
								IProjectVariables.DAYS_BALANCE_FIELD_MORE_THAN_2_1ANN)
						.setValue(moreThan21Ann);

						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Days BALANCE Response | daysBalanceResponse | regularNights > 21: " + days);
					} else {
						String lessThan21Ann="CMH40001_1.wav*SS:" + days + ":number*CMH40001_3.wav";
						mySession
						.getVariableField(IProjectVariables.DAYS_BALANCE,
								IProjectVariables.DAYS_BALANCE_FIELD_LESS_THAN_2_1ANN)
						.setValue(lessThan21Ann);
						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Days BALANCE Response | daysBalanceResponse | regularNights < 21 " + days);
					}
				} else {
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Days BALANCE Response | daysBalance is null" + daysBalanceResponse);
					mySession.getVariableField(IProjectVariables.DAYS_BALANCE,
							IProjectVariables.DAYS_BALANCE_FIELD_IS_SUCCESS).setValue(false);
				}
				mySession.getVariableField(IProjectVariables.DAYS_BALANCE,
						IProjectVariables.DAYS_BALANCE_FIELD_IS_SUCCESS).setValue(true);
			}else {

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Days BALANCE Response | daysBalanceResponse API is null" + daysBalanceResponse);
				mySession.getVariableField(IProjectVariables.DAYS_BALANCE,
						IProjectVariables.DAYS_BALANCE_FIELD_IS_SUCCESS).setValue(false);
			}

		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Days BALANCE Response | Exception While Getting the details of Days BALANCE Response " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Days BALANCE Response | Exception While Closing Buffered Reader " + e);
			}
		}
	}
	
	/**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	
	
	
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:21 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("DaysBalance-RequestSuccess", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
