package flow.subflow.WaitingList;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.MemberInformationReq;
import org.vis.club.mahindra.api.model.UpcomingWaitListBkg;
import org.vis.club.mahindra.api.model.WaitListProbability;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-FEB-21  12:18:55 PM
 */
public class WS_WaitingListStatus extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-FEB-21  12:18:55 PM
	 */
	public WS_WaitingListStatus() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-FEB-21  12:18:55 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		//UPCOMING WAITILIST BOOKING
		 getUpcomingWLBkg(mySession);
	

	}

	private void getUpcomingWLBkg(com.avaya.sce.runtimecommon.SCESession mySession) {
		BufferedReader rd = null;
		UpcomingWaitListBkg wlBkgStatus = null;
		Gson gson = new Gson();
		
		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");

			Properties properties = loadPropertyFile(config);
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
							.concat(properties.getProperty("localhost_app_name"));
			String WlURL = appURL
							.concat(properties.getProperty("waiting_list_url"));
			
			String memberID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
					.getStringValue();
			
			String memberShipID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_SHIP_ID)
					.getStringValue();			
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "memberID, memberShipID: "
			+ memberID+", "+memberShipID);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "WL URL: " + WlURL);

			HttpPost post = new HttpPost(WlURL);
			post.addHeader("Content-Type", "application/json");

//			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
//
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.MEMEBER_ID, memberID));
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.MEMEBERSHIP_ID, memberShipID));
//
//			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
//			StringEntity stringEntity = new StringEntity("{\n" + 
//					"			    \"MemberId\":\""+memberID+"\",\n" + 
//					"			    \"MembershipId\":\""+memberShipID+"\"\n" + 
//					"			}");
			
			MemberInformationReq memberInformationReq=new MemberInformationReq();
			memberInformationReq.setMemberID(memberID);
			memberInformationReq.setMemberShipID(memberShipID);
			
			String json = gson.toJson(memberInformationReq);
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Mod or Cancel | "
					+ "Wl Status| Upcoming WL Status json req : " + json);
			StringEntity stringEntity=new StringEntity(json);
			
			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			wlBkgStatus = gson.fromJson(jsonResponse, UpcomingWaitListBkg.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, ""+wlBkgStatus);

			List<WaitListProbability> waitListProbability = wlBkgStatus.getGetWaitListProbability();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Mod or Cancel | "
					+ "Wl Status| Upcoming WL Status dummy data : " + wlBkgStatus);
			
			if (wlBkgStatus!=null && wlBkgStatus.getGetWaitListProbability()!=null && !waitListProbability.isEmpty()) {
				mySession.getVariableField(IProjectVariables.WAITING_LIST,
						IProjectVariables.WAITING_LIST_FIELD_WL_BNK_AVAIL)
						.setValue(true);
			} else {
				mySession.getVariableField(IProjectVariables.WAITING_LIST,
						IProjectVariables.WAITING_LIST_FIELD_WL_BNK_AVAIL)
						.setValue(false);
				return;
			}

			String resortAnn="";
			String[] arr=new String[] {"CMH001.wav", "CMH002.wav", "CMH003.wav","CMH004.wav", "CMH005.wav",
			"CMH006.wav"};
//			String[] menuNumber=new String[] {"1", ",2", ",3",",4",",5",",6"};

			Map<String, WaitListProbability> annList=new LinkedHashMap<String, WaitListProbability>();
			
			String menuOptions="";

			//play date in format of
			for (int i = 0; i < waitListProbability.size(); i++) {
				resortAnn+= arr[i] + "*CMH8001_1.wav*"
						+ getAudioFileName(waitListProbability.get(i).getResortName(),mySession, properties)
						+ "*CMH8004_2.wav*" + "CMH8004_3.wav*"
						+"SS:" + parseDOB(waitListProbability.get(i).getCheckInDate(), mySession) +  ":date*CMH8004_4.wav*"
						+"SS:" + parseDOB(waitListProbability.get(i).getCheckOutDate(), mySession)+  ":date*silence_1500.wav*";
				annList.put(String.valueOf(i+1) , waitListProbability.get(i));
				menuOptions += (i+1)+",";				
				
				if (i==5) {
					break;
				}
			}
			menuOptions = menuOptions.endsWith(",") ? menuOptions.substring(0, menuOptions.length() - 1) : menuOptions;

			
			mySession.getVariableField(IProjectVariables.WAITING_LIST,
					IProjectVariables.WAITING_LIST_FIELD_MENU_OPTIONS)
					.setValue(menuOptions);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"Menu options : " + menuOptions);

			mySession.getVariableField(IProjectVariables.WAITING_LIST,
					IProjectVariables.WAITING_LIST_FIELD_ANN_ARRAY)
					.setValue(annList);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"Resort Announcement : " + resortAnn);

			mySession.getVariableField(IProjectVariables.WAITING_LIST,
					IProjectVariables.WAITING_LIST_FIELD_RESORT_ANN)
					.setValue(resortAnn);
			
//			mySession.getVariableField(IProjectVariables.WAITING_LIST,
//					IProjectVariables.WAITING_LIST_FIELD_UPCOMING_PROMPT)
//					.setValue(resortAnn);
			

		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While Getting the details of Member Details " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exception While Closing Buffered Reader " + e);
			}
		}
	}
	
	
	
	private String getAudioFileName(String audioKey, SCESession mySession, Properties properties) {
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Audio key : " + audioKey);
		String audioFileName = null;
		
		Enumeration<Object> keys = properties.keys();
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Property Keys List : " + keys);
		
		if (keys!=null) {
			while (keys.hasMoreElements()) {
				String key = (String) keys.nextElement();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Property Keys |  key : " + key);
				if (key!=null && audioKey!=null && 
						audioKey.toLowerCase().contains(key.toLowerCase())) {
					audioFileName = properties.getProperty(key);
				}
			} 
		} else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"WL Status | there is no keys in property file : " + keys);
		}
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Audio FileName : " + audioFileName);
		return audioFileName;
	}
	
	
	private String parseDOB(String bkgDate, SCESession mySession) {

		SimpleDateFormat sdf = null;
		String bookingDate = "";
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"************** WL Status | Booking Date **************" + bkgDate);
		sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
			bookingDate = new SimpleDateFormat("yyyyMMdd").format(sdf.parse(bkgDate));
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"************** WL Status | Parsed Date **************" + bookingDate);
		} catch (ParseException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"************** WL Status | Exception while formatting Date ********" + e);
		}

		return bookingDate;
	}
	
	
	
	
	
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:24 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("WaitingList-Available", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	
	 /**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
}
