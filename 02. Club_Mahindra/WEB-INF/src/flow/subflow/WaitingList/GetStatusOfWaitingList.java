package flow.subflow.WaitingList;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Map.Entry;

import org.vis.club.mahindra.api.model.WaitListProbability;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-FEB-21  12:39:44 PM
 */
public class GetStatusOfWaitingList extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-FEB-21  12:39:44 PM
	 */
	public GetStatusOfWaitingList() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-FEB-21  12:39:44 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
		try {
			String config = getServletContext().getInitParameter("Configuration");
			Properties properties = loadPropertyFile(config);
			Map<String, WaitListProbability> annoucementList = (LinkedHashMap<String, WaitListProbability>) mySession
					.getVariableField(IProjectVariables.WAITING_LIST, IProjectVariables.WAITING_LIST_FIELD_ANN_ARRAY)
					.getObjectValue();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Status, annoucementList : " + annoucementList);
			String userSelectedOption = mySession
					.getVariableField(IProjectVariables.UPCOMING_PROMPT, IProjectVariables.UPCOMING_PROMPT_FIELD_VALUE)
					.getStringValue();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Status, userSelectedOption : " + userSelectedOption);
			
			if (annoucementList!=null && annoucementList.size()==1) {
				userSelectedOption="1";
			}
			
			
//			annoucementList.forEach((key, value) -> {
//				if (annoucementList.containsKey(key) && userSelectedOption.equals(key)) {
//
//					String statusAnn = "CMH8004_1.wav*"
//							+ getAudioFileName(annoucementList.get(key).getResortName(), mySession, properties)
//							+ "*CMH8004_2.wav*" + "CMH8004_3.wav"
//							+ "*SS:" 
//							+ parseDOB(annoucementList.get(key).getCheckInDate(), mySession)
//							+ ":date*CMH8004_4.wav"
//							+ "*SS:" 
//							+ parseDOB(annoucementList.get(key).getCheckOutDate(), mySession) + ":date*"
//							+"are.wav"+getStatus(annoucementList.get(key).getReservationStatus(),mySession,properties);
//
//					mySession.getVariableField(IProjectVariables.WAITING_LIST,
//							IProjectVariables.WAITING_LIST_FIELD_WLANN).setValue(statusAnn);
//				} else {
//					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//							"WL Status, annList doesnt have key : " + annoucementList);
//				}
//			});
			
			
			
			for (Entry<String, WaitListProbability> iterable_element : annoucementList.entrySet()) {
				String key = iterable_element.getKey();
				if (userSelectedOption.equals(key)) {
					String statusAnn = "wl_confirm_chances.wav*"
							+ getAudioFileName(annoucementList.get(key).getResortName(), mySession, properties)
							+ "*CMH10002_2.wav*CMH10002_3.wav*" + "SS:"
							+ parseDOB(annoucementList.get(key).getCheckInDate(), mySession) + ":date*CMH10002_4.wav*"
							+ "SS:" + parseDOB(annoucementList.get(key).getCheckOutDate(), mySession)
							+ ":date*CMH10002_5.wav*CMH10002_6.wav*"
							+getStatus(annoucementList.get(key).getReservationStatus(), mySession, properties);
					
					
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"WL Status, annList reservation status : " +
					annoucementList.get(key).getReservationStatus());
					
					mySession.getVariableField(IProjectVariables.WAITING_LIST,
							IProjectVariables.WAITING_LIST_FIELD_WL__CAN__ANN).setValue(statusAnn);
				} else {
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"WL Status, annList doesnt have key : " + annoucementList);
				}
			}
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Status, Resort Status ANN : " + mySession.getVariableField(IProjectVariables.WAITING_LIST,
							IProjectVariables.WAITING_LIST_FIELD_WL__CAN__ANN).getStringValue());
		} catch (Exception e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "WL Status, exception : " + e);
		}

	}
	
	private String getStatus(String reservationStatus, SCESession mySession, Properties properties) {

		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"WL Status, reservationStatus : " + reservationStatus);

		String resAudioFile = properties.getProperty(reservationStatus);

		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "WL Status, resAudioFile : " + resAudioFile);

		return resAudioFile;

	}

	private String parseDOB(String bkgDate, SCESession mySession) {

		SimpleDateFormat sdf = null;
		String bookingDate = "";
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"**************ModOrCancel | Booking Date **************" + bkgDate);
		sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
			bookingDate = new SimpleDateFormat("yyyyMMdd").format(sdf.parse(bkgDate));
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"**************ModOrCancel | Parsed Date **************" + bookingDate);
		} catch (ParseException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"**************ModOrCancel | Exception while formatting Date ********" + e);
		}
		return bookingDate;
	}
	 /**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	
	private String getAudioFileName(String audioKey, SCESession mySession, Properties properties) {
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Audio key : " + audioKey);
		String audioFileName = null;
		
		Enumeration<Object> keys = properties.keys();
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Property Keys List : " + keys);
		
		if (keys!=null) {
			while (keys.hasMoreElements()) {
				String key = (String) keys.nextElement();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Property Keys |  key : " + key);
				if (key!=null && audioKey!=null && 
						audioKey.toLowerCase().contains(key.toLowerCase())) {
					audioFileName = properties.getProperty(key);
				}
			} 
		} else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"WL Status | there is no keys in property file : " + keys);
		}
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Status | Audio FileName : " + audioFileName);
		return audioFileName;
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:24 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("WaitingList-WaitingListAnn", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
