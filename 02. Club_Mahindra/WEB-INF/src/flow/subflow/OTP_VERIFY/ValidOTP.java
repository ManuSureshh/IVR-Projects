package flow.subflow.OTP_VERIFY;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.UserReporting;
import org.vis.club.mahindra.api.model.VerifyOTPResponse;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.google.gson.Gson;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-15  12:20:41 PM
 */
public class ValidOTP extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-NOV-15  12:20:41 PM
	 */
	public ValidOTP() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-NOV-15  12:20:41 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		verifyOTP(mySession);
	}
	
	
	private void verifyOTP(com.avaya.sce.runtimecommon.SCESession mySession) {
		String config = getServletContext().getInitParameter("Configuration");
		Properties properties;
		try {
			properties = loadPropertyFile(config);

			BufferedReader rd = null;
			VerifyOTPResponse verifyOTPResponse = null;
			Gson gson = new Gson();

			String info = "";
			String jsonResponse = "";

			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));
			String verifyOTPURL = appURL.concat(properties.getProperty("verify_otp"));

			String OTP = mySession.getVariableField(IProjectVariables.ENTER_OTP,
					IProjectVariables.ENTER_OTP_FIELD_VALUE)
					.getStringValue();
			
			String memberID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS, IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
			.getStringValue();
			

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Verify OTP | OTP: " + OTP);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Verify OTP | URL: " + verifyOTPURL);

			HttpPost post = new HttpPost(verifyOTPURL);

			post.addHeader("Content-Type", "application/json");

//				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			//
//				nameValuePairs.add(new BasicNameValuePair(AppConstant.MOBILE_NUMBER, mobileNumber));
			//
//				post.setEntity(new UrlEncodedForm(nameValuePairs));
			String userMobileNumber = mySession.getVariableField(IProjectVariables.SESSION,
					IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			
			StringEntity stringEntity = new StringEntity("{\n" + 
					"			    \"MemberId\":\""+memberID+"\",\n" + 
					"			    \"MobileNumber\":\""+userMobileNumber+"\"\n" + 
					"			    \"OTP\":\""+OTP+"\"\n" + 
					"			}");
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Verify OTP| Response of Validate OTP| String entity: " + stringEntity);
			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Verify OTP | Response of Verify OTP: " + jsonResponse);
			verifyOTPResponse = gson.fromJson(jsonResponse, VerifyOTPResponse.class);
			
			
			if (verifyOTPResponse!=null &&
					verifyOTPResponse.getResponseMessage().equalsIgnoreCase("success")) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Verify OTP | Verify OTP API Req Success " + jsonResponse);
				mySession.getVariableField(IProjectVariables.OTPVERIFY,
						IProjectVariables.OTPVERIFY_FIELD_IS_CORRECT_OTP).setValue(true);
				
//				setReportingForOTP(mySession, "Y");
				
			} else {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Verify OTP | Verify OTP API Req failed " + jsonResponse);
				mySession.getVariableField(IProjectVariables.OTPVERIFY,
						IProjectVariables.OTPVERIFY_FIELD_IS_CORRECT_OTP).setValue(false);
//				setReportingForOTP(mySession, "N");

			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "API response:-" + verifyOTPResponse);

		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Check number is reg or not : " + e);
		}
	}

//	private void setReportingForOTP(com.avaya.sce.runtimecommon.SCESession mySession, String OTPSuccess) {
////		UserReporting userReporting = (UserReporting) mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT)
//		.getObjectValue();
//
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Verify OTP |UserReporting object " + userReporting);
//		
//		if (userReporting.getClass().getCanonicalName().equalsIgnoreCase("UserReporting")) {
//			userReporting.setOtp_verified(OTPSuccess);
//		} else {
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"Verify OTP | User reporting object is null" + userReporting);
//		}
//		
//		mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT)
//		.setValue(userReporting);
//		
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Verify OTP | After setting User reporting object" + userReporting);
//	}
	
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:24 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("OTP_VERIFY-CheckOTP", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
