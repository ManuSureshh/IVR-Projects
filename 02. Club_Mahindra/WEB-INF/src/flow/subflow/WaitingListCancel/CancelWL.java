package flow.subflow.WaitingListCancel;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.WaitListCancellationResponse;
import org.vis.club.mahindra.api.model.WaitListProbability;
import org.vis.club.mahindra.api.model.WaitlistCancelReq;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-FEB-21  02:52:37 PM
 */
public class CancelWL extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-FEB-21  02:52:37 PM
	 */
	public CancelWL() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-FEB-21  02:52:37 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
	
		BufferedReader rd = null;
		WaitListCancellationResponse wlCanceStatus = null;
		Gson gson = new Gson();

		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");

			Properties properties = loadPropertyFile(config);
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));

			String WlCanURL = appURL.concat(properties.getProperty("wait_list_cancellation"));

			Map<String, WaitListProbability> annoucementList = (Map<String, WaitListProbability>) mySession
					.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_ANN_ARRAY)
					.getObjectValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, annoucementList : " + annoucementList);

			
			String userSelectedOption = mySession.getVariableField(IProjectVariables.PROMPT_USER_MENU,
					IProjectVariables.PROMPT_USER_MENU_FIELD_VALUE).getStringValue();
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, userselectedoptions : "+userSelectedOption);
			
			int size = annoucementList.size();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, size : " + size);

			if (size==1) {
				userSelectedOption="1";
			}
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, userSelectedOption : " + userSelectedOption);	
			
//			annoucementList.forEach((key, value) -> {
//				
//				if (userSelectedOption.equals(key)) {
//					String statusAnn = "52_YourWL.wav*"
//							+ getAudioFileName(annoucementList.get(key).getResortName(), mySession, properties)
//							+ "*CMH6003_2.wav*CMH6003_3.wav*"
//							+ "SS:" + parseDOB(annoucementList.get(key).getCheckInDate(), mySession)+ ":date*CMH6003_4.wav*"
//							+ "SS:" + parseDOB(annoucementList.get(key).getCheckOutDate(), mySession) + ":date";
//				mySession.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_CVV)
//				.setValue(annoucementList.get(key).getwLNo());
//				mySession.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_CANCEL_ANN)
//				.setValue(statusAnn);
//				}
//			});
			
			
			for (Entry<String, WaitListProbability> iterable_element : annoucementList.entrySet()) {
				String key = iterable_element.getKey();
				if (userSelectedOption.equals(key)) {
					String statusAnn = "CMH10002_1.wav*"
							+ getAudioFileName(annoucementList.get(key).getResortName(), mySession, properties)
							+ "*CMH10002_2.wav*CMH10002_3.wav*" + "SS:"
							+ parseDOB(annoucementList.get(key).getCheckInDate(), mySession) + ":date*CMH10002_4.wav*"
							+ "SS:" + parseDOB(annoucementList.get(key).getCheckOutDate(), mySession)
							+ ":date*CMH10002_5.wav*CMH10002_6.wav";
					
					mySession.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_CVV)
							.setValue(annoucementList.get(key).getwLNo());
					mySession.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_CANCEL_ANN)
							.setValue(statusAnn);
				}
			}
			
			String cvv = mySession.getVariableField(IProjectVariables.WLCANCEL,
					IProjectVariables.WLCANCEL_FIELD_CVV)
					.getStringValue();
			String canReasonID = properties.getProperty("CanReasonID");
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "WL Cancel, statusAnn : " + mySession
					.getVariableField(IProjectVariables.WLCANCEL, IProjectVariables.WLCANCEL_FIELD_CANCEL_ANN)
					.getStringValue());

//			StringEntity stringEntity = new StringEntity("{\n" + "			    \"CVNO\":\"" + cvv + "\",\n"
//					+ "			    \"CanReasonID\":\"" + canReasonID + "\"\n" + "			}");
			
			
			WaitlistCancelReq waitlistCancelReq=new WaitlistCancelReq();
			waitlistCancelReq.setCanReasonID(canReasonID);
			waitlistCancelReq.setCvvNo(cvv);
			
			String json = gson.toJson(waitlistCancelReq);
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "WL Cancel | Canel WL json req : " + json);
		
			StringEntity stringEntity=new StringEntity(json);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, cvv  : " + cvv+", "+"canReasonID "+canReasonID);	
			
			HttpPost post = new HttpPost(WlCanURL);
			post.addHeader("Content-Type", "application/json");

			post.setEntity(stringEntity);
			
			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			
			wlCanceStatus = gson.fromJson(jsonResponse, WaitListCancellationResponse.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, wlCanceStatus response  : " + wlCanceStatus);	
			if (wlCanceStatus!=null && wlCanceStatus.getResponseMessage().equalsIgnoreCase("success")) {
				 mySession.getVariableField(IProjectVariables.WLCANCEL,
						 IProjectVariables.WLCANCEL_FIELD_CANCELLATION)
					.setValue(true);
			} else {
				 mySession.getVariableField(IProjectVariables.WLCANCEL,
						 IProjectVariables.WLCANCEL_FIELD_CANCELLATION)
					.setValue(false);
			}
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, wlCanceStatus cancellation success : " + 
			mySession.getVariableField(IProjectVariables.WLCANCEL,
							 IProjectVariables.WLCANCEL_FIELD_CANCELLATION)
						.getBooleanValue());	

		} catch (Exception e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"WL Cancel, exception : " + e);	
		}
		
	}
		
	
	private String getAudioFileName(String audioKey, SCESession mySession, Properties properties) {
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Cancel| Audio key : " + audioKey);
		String audioFileName = null;
		
		Enumeration<Object> keys = properties.keys();
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Cancel| Property Keys List : " + keys);
		
		if (keys!=null) {
			while (keys.hasMoreElements()) {
				String key = (String) keys.nextElement();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Property Keys |  key : " + key);
				if (key!=null && audioKey!=null && 
						audioKey.toLowerCase().contains(key.toLowerCase())) {
					audioFileName = properties.getProperty(key);
				}
			} 
		} else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"WL Cancel| there is no keys in property file : " + keys);
		}
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"WL Cancel| Audio FileName : " + audioFileName);
		return audioFileName;
	}
	
	private String parseDOB(String bkgDate, SCESession mySession) {

		SimpleDateFormat sdf = null;
		String bookingDate = "";
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"**************ModOrCancel | Booking Date **************" + bkgDate);
		sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
//			bookingDate = new SimpleDateFormat("MMddyyyy").format(sdf.parse(bkgDate));
			
			bookingDate = new SimpleDateFormat("yyyyMMdd").format(sdf.parse(bkgDate));
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"**************ModOrCancel | Parsed Date **************" + bookingDate);
		} catch (ParseException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"**************ModOrCancel | Exception while formatting Date ********" + e);
		}
		return bookingDate;
	}
	
		/**
	     * @param config 
	     * @return
	     * @throws FileNotFoundException
	     * @throws IOException
	     */
		private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
			FileReader reader = null;
			reader = new FileReader(config);
			Properties properties = new Properties();
			properties.load(reader);
			return properties;
		}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:25 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("WaitingListCancel-CancellationSuccess", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
