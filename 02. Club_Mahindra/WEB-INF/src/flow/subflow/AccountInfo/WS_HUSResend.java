package flow.subflow.AccountInfo;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.vis.club.mahindra.api.model.HUSResendResponse;
import org.vis.club.mahindra.api.model.MemberInformationReq;
import org.vis.club.mahindra.api.model.WLCancelMemberInfo;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

import flow.AppConstant;
import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-DEC-02  03:22:54 PM
 */
public class WS_HUSResend extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-DEC-02  03:22:54 PM
	 */
	public WS_HUSResend() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-DEC-02  03:22:54 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		String DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS)
					.getStringValue();
		husResend(DNIS, mySession);
	}
	
	private HUSResendResponse husResend(String dNIS, SCESession mySession) {


		BufferedReader rd = null;
		HUSResendResponse husResendResponse = null;
		Gson gson = new Gson();
		
		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");
			Properties properties = loadPropertyFile(config);
			
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty(AppConstant.LOCALHOST_URL)
							.concat(properties.getProperty(AppConstant.LOCALHOST_APP_NAME));
			
			String userLangURL = appURL
							.concat(properties.getProperty(AppConstant.HUS_RESEND_URL));
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "HUS | URL: " + userLangURL);

			HttpPost post = new HttpPost(userLangURL);
			post.addHeader("Content-Type", "application/json");

			String memberID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
					.getStringValue();
			
			String memberShipID = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_SHIP_ID)
					.getStringValue();


			WLCancelMemberInfo memberInformationReq=new WLCancelMemberInfo();
			memberInformationReq.setMemberID(memberID);
			memberInformationReq.setMemberShipID(memberShipID);
			
			String json = gson.toJson(memberInformationReq);
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Mod or Cancel | "
					+ "ACCT INFO | HUS RESEND json req : " + json);
			
			StringEntity stringEntity=new StringEntity(json);			
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"ACCT INFO  | member id: "+memberID+", membership id: "+memberShipID);

			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"HUS | jsonResponse :"+jsonResponse);

			if (jsonResponse != null) {
				husResendResponse = gson.fromJson(jsonResponse, HUSResendResponse.class);

				if (husResendResponse != null && husResendResponse.getResponseMessage().equalsIgnoreCase("success")) {
					mySession.getVariableField(IProjectVariables.ACCOUNT_INFO,
							IProjectVariables.ACCOUNT_INFO_FIELD_SUCCESS).setValue(true);
					Object getHolidayUsageSummary = husResendResponse.getGetHolidayUsageSummary();

					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"HUS | husResendResponse " + husResendResponse);
				} else {
					mySession.getVariableField(IProjectVariables.ACCOUNT_INFO,
							IProjectVariables.ACCOUNT_INFO_FIELD_SUCCESS).setValue(false);
				}
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"husResendResponse: "+husResendResponse);
			
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While Getting the details of User selected lang " + e);
			
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exception While Closing Buffered Reader " + e);
			}
		}
		return husResendResponse;
	
		
	}
	
	 /**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:20 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("AccountInfo-ReqSuccess", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-MAR-28  04:45:36 PM
	 */
//	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
//		java.util.List list = null;
//		com.avaya.sce.runtime.Goto aGoto = null;
//		list = new java.util.ArrayList(1);
//
//		aGoto = new com.avaya.sce.runtime.Goto("AccountInfo-ReqSuccess", 0, true, "Default");
//		list.add(aGoto);
//
//		return list;
//	}
}
