package flow.subflow.BookingCancel;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.vis.club.mahindra.api.model.BookingProbability;
import org.vis.club.mahindra.api.model.CancelBookingResponse;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

import flow.AppConstant;
import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-MAR-29  04:25:47 PM
 */
public class WS_CancelBooking extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-MAR-29  04:25:47 PM
	 */
	public WS_CancelBooking() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-MAR-29  04:25:47 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		cancelTheBooking(mySession);
	}
	
	
	private void cancelTheBooking(com.avaya.sce.runtimecommon.SCESession mySession) {
		BufferedReader rd = null;
		CancelBookingResponse cancelBookingResponse = null;
		Gson gson = new Gson();

		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");

			Properties properties = loadPropertyFile(config);
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));
			String WlURL = appURL.concat(properties.getProperty("cancel_booking"));

			Map<String, BookingProbability> annoucementList = (Map<String, BookingProbability>) mySession
					.getVariableField(IProjectVariables.BOOKINGS, IProjectVariables.BOOKINGS_FIELD_BOOKING_INFO)
					.getObjectValue();
//			String userSelectedOption = mySession
//					.getVariableField(IProjectVariables.BOOKING_MENU, IProjectVariables.BOOKING_MENU_FIELD_VALUE)
//					.getStringValue();

//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"Bkg Cancel, userSelectedOption : " + userSelectedOption);
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Bkg Cancel, annoucementList : " + annoucementList);
			
			int CancelBkgListSize = annoucementList.size();
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Bkg Cancel, cancelBkgListSize : " + CancelBkgListSize);			
			
			if (CancelBkgListSize == 1) {
				mySession
				.getVariableField(IProjectVariables.BOOKING_MENU, IProjectVariables.BOOKING_MENU_FIELD_VALUE)
				.setValue("1");
			}
			
			
			if (annoucementList!=null) {
				annoucementList.forEach((key, value) -> {
					String bookingKey = mySession
							.getVariableField(IProjectVariables.BOOKING_MENU, IProjectVariables.BOOKING_MENU_FIELD_VALUE)
							.getStringValue();
					if (annoucementList.containsKey(key) && bookingKey.equals(key)) {
						String statusAnn = "CMH6003_1.wav*"
								+ getAudioFileName(annoucementList.get(key).getResortName().toLowerCase(),mySession, properties) + "*CMH6003_2.wav*"
								+ "CMH6003_3.wav" +
								"*SS:" + parseDOB(annoucementList.get(key).getCheckIn(), mySession) + ":date*CMH6003_4.wav" +
								"*SS:" + parseDOB(annoucementList.get(key).getCheckOut(), mySession) + ":date*CMH6003_5.wav*CMH6003_6.wav";

						mySession.getVariableField(IProjectVariables.BOOKINGS,
								IProjectVariables.BOOKINGS_FIELD_CANCEL_ANN).setValue(statusAnn);
						
						mySession.getVariableField(IProjectVariables.BOOKINGS,
								IProjectVariables.BOOKINGS_FIELD_CVV).setValue(annoucementList.get(key).getcVNo());					

						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Bkg Cancel, Cancelled Resort Ann: " + statusAnn);
					}else {
						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
								"Bkg Cancel, annList doesnt have key : " + annoucementList);
					}
				});
			}
			String cvv = mySession.getVariableField(IProjectVariables.BOOKINGS, IProjectVariables.BOOKINGS_FIELD_CVV)
					.getStringValue();
			String canReasonID = properties.getProperty("CanReasonID");

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"cancel booking | canReasonID : " + canReasonID);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "cancel booking | cvv : " + cvv);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "cancel booking | URL: " + WlURL);

			HttpPost post = new HttpPost(WlURL);
			post.addHeader("Content-Type", "application/json");

//			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
//
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.CVNO, cvv));
//			nameValuePairs.add(new BasicNameValuePair(AppConstant.CAN_REASON_ID, canReasonID));
//
//			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));

			StringEntity stringEntity = new StringEntity("{\n" + "			    \"CVNO\":\"" + cvv + "\",\n"
					+ "			    \"CanReasonID\":\"" + canReasonID + "\"\n" + "			}");

			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			cancelBookingResponse = gson.fromJson(jsonResponse, CancelBookingResponse.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "" + cancelBookingResponse);

			String responseMessage = cancelBookingResponse.getResponseMessage();

			if (responseMessage != null && responseMessage.equalsIgnoreCase("Success")) {
				mySession.getVariableField(IProjectVariables.BOOKINGS,
						IProjectVariables.BOOKINGS_FIELD_CANCELLATION_SUCCESS).setValue(true);
			} else {
				mySession.getVariableField(IProjectVariables.BOOKINGS,
						IProjectVariables.BOOKINGS_FIELD_CANCELLATION_SUCCESS).setValue(false);
			}

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"BKG Cancel, annoucementList : " + annoucementList);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Bkg Cancel, statusAnn : " + mySession
							.getVariableField(IProjectVariables.BOOKINGS, IProjectVariables.BOOKINGS_FIELD_CANCEL_ANN)
							.getStringValue());

		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Cancel Booking Response | Exception While Getting the details of cancel Booking Response " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Cancel Booking Response | Exception While Closing Buffered Reader " + e);
			}
		}
	}
	
	private String getAudioFileName(String audioKey, SCESession mySession, Properties properties) {
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"Booking Cancel | Audio key : " + audioKey);
		String audioFileName = null;
		
		Enumeration<Object> keys = properties.keys();
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"Booking Cancel | Property Keys List : " + keys);
		
		if (keys!=null) {
			while (keys.hasMoreElements()) {
				String key = (String) keys.nextElement();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Property Keys |  key : " + key);
				if (key!=null && audioKey!=null && 
						audioKey.toLowerCase().contains(key.toLowerCase())) {
					audioFileName = properties.getProperty(key);
				}
			} 
		} else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"Booking Cancel | there is no keys in property file : " + keys);
		}
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
				"Booking Cancel | Audio FileName : " + audioFileName);
		return audioFileName;
	}
	
	/**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	
	
	private String parseDOB(String bkgDate, SCESession mySession) {

		SimpleDateFormat sdf = null;
		String bookingDate = "";
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"************** Bkg Cancel | Booking Date **************" + bkgDate);
		sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
			bookingDate = new SimpleDateFormat("yyyyMMdd").format(sdf.parse(bkgDate));
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"************** Bkg Cancel | Parsed Date **************" + bookingDate);
		} catch (ParseException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"************** Bkg Cancel | Exception while formatting Date ********" + e);
		}
		return bookingDate;
	}
	
	
	
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:21 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("BookingCancel-IsBookingCancelled", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
