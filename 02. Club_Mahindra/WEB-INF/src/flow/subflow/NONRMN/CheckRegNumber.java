package flow.subflow.NONRMN;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.MemberResponse;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-15  10:58:45 AM
 */
public class CheckRegNumber extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-NOV-15  10:58:45 AM
	 */
	public CheckRegNumber() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-NOV-15  10:58:45 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		isUserReg(mySession);

	}

	private void isUserReg(com.avaya.sce.runtimecommon.SCESession mySession) {
		String config = getServletContext().getInitParameter("Configuration");
		Properties properties;
		try {
			properties = loadPropertyFile(config);

			String userEnteredNumber = mySession
					.getVariableField(IProjectVariables.NOT_REG_NUM, IProjectVariables.NOT_REG_NUM_FIELD_VALUE)
					.getStringValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Check Reg Number | User Entered Number  " + userEnteredNumber);

			MemberResponse memberDetails = getMemberDetails(userEnteredNumber, mySession, properties);

//			String responseMessage = memberDetails.getResponseMessage();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Check Reg Number | Member Details Response: " + memberDetails);

			if (memberDetails!=null && memberDetails.getResponseMessage()!=null &&
					memberDetails.getResponseMessage().equalsIgnoreCase("success") && 
					memberDetails.getMembers() != null && !memberDetails.getMembers().isEmpty()) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Check Reg Number | Reg User : " + memberDetails);
				mySession.getVariableField(IProjectVariables.NON_RMN, IProjectVariables.NON_RMN_FIELD_IS_VALID_NUMBER)
						.setValue(true);

				String contractId = memberDetails.getMembers().get(0).getContractId();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "contractId: " + contractId);

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_CONTRACT_ID)
						.setValue(contractId);
				String memberDOB = memberDetails.getMembers().get(0).getMemberDOB();
			
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "memberDOB: " + memberDOB);

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_DOB)
						.setValue(memberDOB);
				String memberShipId = memberDetails.getMembers().get(0).getMemberShipId();
				
				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_SHIP_ID)
						.setValue(memberShipId);
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "memberShipId: " + memberShipId);
				
				String memberId = memberDetails.getMembers().get(0).getMemberId();
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "memberId: " + memberId);

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_ID)
						.setValue(memberId);

				String asfDue = memberDetails.getMembers().get(0).getAsfDue();

				mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
						IProjectVariables.MEMBER_DETAILS_FIELD_ASF__DUE).setValue(asfDue);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "ASF DUE: " + asfDue);

				String emiDue = memberDetails.getMembers().get(0).getEmiDue();
				mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
						IProjectVariables.MEMBER_DETAILS_FIELD_EMI__DUE).setValue(emiDue);

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "EMI DUE: " + emiDue);

				mySession
						.getVariableField(IProjectVariables.MEMBER_DETAILS,
								IProjectVariables.MEMBER_DETAILS_FIELD_COMPLIMENTARY_NIGHTS)
						.setValue(memberDetails.getMembers().get(0).getComplimentaryNights());

			} else {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Check Reg Number | Member Details Response Failed: " + memberDetails);
				mySession.getVariableField(IProjectVariables.NON_RMN, IProjectVariables.NON_RMN_FIELD_IS_VALID_NUMBER)
						.setValue(false);
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Check Reg Number | Member reg? : " +
			mySession.getVariableField(IProjectVariables.NON_RMN, IProjectVariables.NON_RMN_FIELD_IS_VALID_NUMBER)
			.getStringValue());
			
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Check number is reg or not : " + e);
		}
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:24 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("NONRMN-ValidNumberCheck", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	
	 /**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	
	public MemberResponse getMemberDetails(String mobileNumber, SCESession mySession, Properties properties) {

		BufferedReader rd = null;
		MemberResponse memberInformation = null;
		Gson gson = new Gson();
		
		String info = "";
		String jsonResponse = "";
		try {
//			Properties properties = loadPropertyFile();
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
							.concat(properties.getProperty("localhost_app_name"));
			String MemberDetailURL = appURL
							.concat(properties.getProperty("member_details_url"));
							
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MobileNumber: " + mobileNumber);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "URL: " + MemberDetailURL);

			HttpPost post = new HttpPost(MemberDetailURL);
			post.addHeader("Content-Type", "application/json");

//			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();

//			nameValuePairs.add(new BasicNameValuePair(AppConstant.MOBILE_NUMBER, mobileNumber));
//			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));

			StringEntity stringEntity = new StringEntity("{\n" + 
					"    \"MobileNumber\": \""+mobileNumber+"\"\n" + 
					"}");
			
			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			memberInformation = gson.fromJson(jsonResponse, MemberResponse.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Non RMN response : "+memberInformation);
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While Getting the details of Member Details " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exception While Closing Buffered Reader " + e);
			}
		}
		return memberInformation;
	}
}
