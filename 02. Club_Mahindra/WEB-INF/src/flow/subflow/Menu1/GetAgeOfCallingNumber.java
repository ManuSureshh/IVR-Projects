package flow.subflow.Menu1;

import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.VariableTypeException;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-25  02:44:50 PM
 */
public class GetAgeOfCallingNumber extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-NOV-25  02:44:50 PM
	 */
	public GetAgeOfCallingNumber() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-NOV-25  02:44:50 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		try {
			String ageOfTheCaller = mySession.getVariableField(IProjectVariables.MEMBER_DETAILS,
					IProjectVariables.MEMBER_DETAILS_FIELD_MEMBER_DOB).getStringValue();
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MMM/yyyy");

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"MENU1 |  ageOfTheCaller: " + ageOfTheCaller);
			if (ageOfTheCaller!="" && ageOfTheCaller!=null && !ageOfTheCaller.isEmpty()) {
				//yyyy-mm-dd
				LocalDate dob = LocalDate.parse(ageOfTheCaller, formatter);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MENU1 |  parsed dob : " + dob);
				
				LocalDate dob1 = LocalDate.parse(dob.toString());
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MENU1 |  parsed dob1 : " + dob1);
				
				int age = calculateAge(dob1);
				mySession.getVariableField(IProjectVariables.MENU_1, IProjectVariables.MENU_1_FIELD_AGE).setValue(age);
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Age: " + age);
			}else {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "MENU1 | DOB is null or empty: " + ageOfTheCaller);

				mySession.getVariableField(IProjectVariables.MENU_1, IProjectVariables.MENU_1_FIELD_AGE).setValue(0);
			}
			
//			
//			String dob = "07/Oct/1995";
			
//			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MMM/yyyy");

//			LocalDate localDate = LocalDate.parse(dob, formatter);
//			System.out.println(localDate);
//
//			LocalDate dob1 = LocalDate.parse(localDate.toString());
//
//			int age = calculateAge(dob1);
//			System.out.println("\n age- "+age);
			
			
			
		} catch (VariableTypeException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"MENU1 |  exception : " + e);
		}

	}

	private int calculateAge(LocalDate dob) {

		LocalDate curDate = LocalDate.now();
		if ((dob != null) && (curDate != null)) {
			return Period.between(dob, curDate).getYears();
		} else {
			return 0;
		}

	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:22 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Menu1-CallerAge", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
