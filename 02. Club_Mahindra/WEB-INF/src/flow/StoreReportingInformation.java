package flow;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.UserReporting;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-APR-12  12:41:14 PM
 */
public class StoreReportingInformation extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-APR-12  12:41:14 PM
	 */
	public StoreReportingInformation() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-APR-12  12:41:14 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

//		storeReporting(mySession);
	}
	
//	public UserReporting storeReporting(SCESession mySession) {
//
//		BufferedReader rd = null;
//		UserReporting userReportingInfo = null;
//		Gson gson = new Gson();
//		String config = getServletContext().getInitParameter("Configuration");
//
//		String info = "";
//		String jsonResponse = "";
//		try {
//			UserReporting userReporting = (UserReporting) mySession.getVariableField(IProjectVariables.MAIN, 
//					IProjectVariables.MAIN_FIELD_USER_REPORTING_OBJECT)
//			.getObjectValue();
//			
//			userReporting.setEnd_time(new Date());
//			
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
//					"userReporting storing in DB: " + userReporting);
//
//			Properties properties = loadPropertyFile(config);
//			HttpClient client = HttpClientBuilder.create().build();
//			String appURL = properties.getProperty("localhost_url")
//					.concat(properties.getProperty("localhost_app_name"));
//			String storeReportingURL = appURL.concat(properties.getProperty("save-reporting-information"));
//
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "userReporting: " + userReporting);
//
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "URL: " + storeReportingURL);
//
//			HttpPost post = new HttpPost(storeReportingURL);
//
//			post.addHeader("Content-Type", "application/json");
//
//			String postReqString=gson.toJson(userReporting);
//			
//			StringEntity stringEntity = new StringEntity(postReqString);
//			
//			post.setEntity(stringEntity);
//
//			HttpResponse response = client.execute(post);
//
//			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
//
//			while ((info = rd.readLine()) != null) {
//				jsonResponse += (info);
//			}
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"Reporting | Response of Reporting information: " + jsonResponse);
//			userReportingInfo = gson.fromJson(jsonResponse, UserReporting.class);
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Reporting | API response:-" + userReportingInfo);
//		} catch (IOException e) {
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"Reporting | Exception While Getting the details of Member Details " + e);
//		}
//		return userReportingInfo;
//	}
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:26 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Exit", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	
	/**
	 * @param config
	 * @return
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
}
