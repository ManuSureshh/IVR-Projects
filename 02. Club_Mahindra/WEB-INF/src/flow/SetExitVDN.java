package flow;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;

import com.avaya.sce.runtimecommon.ITraceInfo;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-APR-11  11:58:29 AM
 */
public class SetExitVDN extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-APR-11  11:58:29 AM
	 */
	public SetExitVDN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-APR-11  11:58:29 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {



		// TODO: Add your code here!
		String config = getServletContext().getInitParameter("Configuration");

		try {
			Properties properties = loadPropertyFile(config);

			String propertyLocation = mySession
					.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_PROPERTY_LOCATION)
					.getStringValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exit VDN | propertyLocation: " + propertyLocation);

			String hindiProps = getServletContext().getInitParameter("HINDI_PROPERTIES");

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Exit VDN | Hindi location: " + hindiProps);

			String exitVDNSuffix = mySession
					.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_EXIT__VDN__SUFFIX)
					.getStringValue();

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exit VDN | exitVDNSuffix: " + exitVDNSuffix);

			if (propertyLocation.equals(hindiProps)) {

				String hindiExitVDNPrefix = mySession.getVariableField(IProjectVariables.EXIT_VDN,
						IProjectVariables.EXIT_VDN_FIELD_EXIT__HIN__VDN__PREFIX).getStringValue();
				String hindiVDN = hindiExitVDNPrefix.concat(exitVDNSuffix);

				String VDN = properties.getProperty(hindiVDN);
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exit VDN | Hindi : " + hindiVDN);
				
				mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_VDN)
						.setValue(VDN);
			} else {
				String engExitVDNPrefix = mySession.getVariableField(IProjectVariables.EXIT_VDN,
						IProjectVariables.EXIT_VDN_FIELD_EXIT__HIN__VDN__PREFIX).getStringValue();

				String engVDN = engExitVDNPrefix.concat(exitVDNSuffix);

				String VDN = properties.getProperty(engVDN);
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exit VDN | English : " + engVDN);
				
				mySession.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_VDN)
						.setValue(VDN);
				
			}

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exit VDN | EXIT VDN: " + mySession
							.getVariableField(IProjectVariables.EXIT_VDN, IProjectVariables.EXIT_VDN_FIELD_VDN)
							.getStringValue());
		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exit VDN | Exception : " + e);
		}
	

	}
	
	
	/**
     * @param config 
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:26 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Agent", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
