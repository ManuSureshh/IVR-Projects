package flow;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.vis.club.mahindra.api.model.UserLanguage;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.google.gson.Gson;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
 */
public class CheckCallerLanguageSelection extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
	 */
	public CheckCallerLanguageSelection() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		getUserLanguage(mySession);
	}
	
	private void getUserLanguage(SCESession mySession) {

		String config = getServletContext().getInitParameter("Configuration");
		Properties properties;
		try {
			properties = loadPropertyFile(config);

			Gson gson = new Gson();
			String appURL = properties.getProperty("localhost_url")
					.concat(properties.getProperty("localhost_app_name"));
			String userLangURL = appURL.concat(properties.getProperty("get_user_lang"));
						
			String ani = mySession.getVariableField(IProjectVariables.SESSION,
					IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Get User Lang | ani: " +
					ani);

			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Get User Lang| URL: " + userLangURL);

			URIBuilder builder = new URIBuilder(userLangURL);
			builder.setParameter("mobileNumber", ani);
			
			HttpGet httpget = new HttpGet(builder.build());
		    final CloseableHttpClient httpClient = HttpClients.createDefault();

			 try (CloseableHttpResponse response = httpClient.execute(httpget)) {
				 mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Get User Lang| API Response : " +
			 response.getStatusLine().toString());

		            HttpEntity entity = response.getEntity();
		            Header headers = entity.getContentType();
		            System.out.println(headers);

					if (entity != null) {
						String result = EntityUtils.toString(entity);

						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Get User Lang| result : " + result);

						UserLanguage userinfo = gson.fromJson(result, UserLanguage.class);

						mySession.getVariableField(IProjectVariables.MAIN,
								IProjectVariables.MAIN_FIELD_USER_LANGUAGE_OBJ).setValue(userinfo);

						mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
								"Get User Lang| user languages : " + userinfo);
						String language = userinfo.getLanguage();

						if (language != null) {
							String[] languages = language.split(",");
							mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
									"Get User Lang| user languages list : " + languages);
							List<String> langList = Arrays.asList(languages);
							if (langList.size() >= 3) {
								boolean verifyAllEqualUsingStream = verifyAllEqualUsingStream(langList);
								mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
										"Get User Lang| verifyAllEqualUsingStream: " + verifyAllEqualUsingStream);
								if (verifyAllEqualUsingStream) {
									mySession.getVariableField(IProjectVariables.MAIN,
											IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME).setValue(true);
								} else {
									mySession.getVariableField(IProjectVariables.MAIN,
											IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME).setValue(false);
								}

							} else { 
								mySession.getVariableField(IProjectVariables.MAIN,
										IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME).setValue(false);
							}
						} else {
							mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
									"Get User Lang| language is null : " + language);
							mySession.getVariableField(IProjectVariables.MAIN,
									IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME).setValue(false);
						}
					} else {
						mySession.getVariableField(IProjectVariables.MAIN,
								IProjectVariables.MAIN_FIELD_IS_LAST_3LANG_SAME).setValue(false);
					}
		        }
			
			 // need to convert from api response to java object
		} catch (IOException | URISyntaxException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Check number is reg or not | exception"
					+ " : " + e);
		}
	}	
	
	public boolean verifyAllEqualUsingStream(List<String> list) {
	    return list.stream()
	      .distinct()
	      .count() <= 1;
	}
		
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:26 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("LangSelectionSame", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
