package flow;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.vis.club.mahindra.api.model.LanguageENUM;
import org.vis.club.mahindra.api.model.UserLanguage;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.google.gson.Gson;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
 */
public class StoreUserLangInDB extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
	 */
	public StoreUserLangInDB() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2022-NOV-14  05:35:18 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		String userSelectedValue = mySession.getVariableField(IProjectVariables.SELECT_LANG,
				IProjectVariables.SELECT_LANG_FIELD_VALUE).getStringValue();
		
		String ani = mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
				.getStringValue();
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"Store user language | ani: " + ani);
		
		
		String postEntity =null;
		if (userSelectedValue.equals("2")) {
			postEntity = insertLanguage(mySession, LanguageENUM.HI, ani);
		} else {
			// insert english language
			postEntity = insertLanguage(mySession, LanguageENUM.ENG, ani);
		}

		//send post request
		
		saveUserLanguage(mySession, postEntity);
		
		super.requestBegin(mySession);

		String hindiProps = getServletContext().getInitParameter("HINDI_PROPERTIES");
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "HindiProps: " + hindiProps);
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "User selected: " + userSelectedValue);

		if (userSelectedValue!=null && Integer.valueOf(userSelectedValue) == 2) {
			mySession.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_PROPERTY_LOCATION)
					.setValue(hindiProps);			
		}
		
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
				"Property Location After setting language : " + mySession
						.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_PROPERTY_LOCATION)
						.getStringValue());
	}
	
	private void saveUserLanguage(com.avaya.sce.runtimecommon.SCESession mySession, String postEntity) {
		BufferedReader rd = null;
		UserLanguage userLanguageResp = null;
		Gson gson = new Gson();
		
		String info = "";
		String jsonResponse = "";
		try {
			String config = getServletContext().getInitParameter("Configuration");

			Properties properties = loadPropertyFile(config);
			HttpClient client = HttpClientBuilder.create().build();
			String appURL = properties.getProperty("localhost_url")
							.concat(properties.getProperty("localhost_app_name"));
			String storeLangURL = appURL
							.concat(properties.getProperty("store_user_language"));
			
//			String storeLangURL="http://localhost:8089/store-user-selected-lang";
			
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "storeLang URL: " + storeLangURL);

			HttpPost post = new HttpPost(storeLangURL);
			post.addHeader("Content-Type", "application/json");

			StringEntity stringEntity = new StringEntity(postEntity);
			post.setEntity(stringEntity);

			HttpResponse response = client.execute(post);

			rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			while ((info = rd.readLine()) != null) {
				jsonResponse += (info);
			}
			userLanguageResp = gson.fromJson(jsonResponse, UserLanguage.class);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
					"Store user language "+userLanguageResp);
			
			if (userLanguageResp!=null && userLanguageResp.getLanguage()!=null &&
					userLanguageResp.getMobileNumber()!=null) {
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
						"Store user language | language stored successfully "+userLanguageResp);
				
			} else {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, 
						"Store user language | Fail to store language in DB "+userLanguageResp);
			}

		} catch (IOException e) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Exception While storing the user language detail " + e);
		} finally {
			try {
				rd.close();
			} catch (IOException e) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Exception While Closing Buffered Reader " + e);
			}
		}
	}


	private String insertLanguage(com.avaya.sce.runtimecommon.SCESession mySession, LanguageENUM languageENUM, String ani) {
		String postEntity = null;
		Object objectValue = mySession
				.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_LANGUAGE_OBJ)
				.getObjectValue();
		
		String name = objectValue.getClass().getName();
		if (name.equalsIgnoreCase("org.vis.club.mahindra.api.model.UserLanguage")) {

			UserLanguage userinfo = (UserLanguage) mySession
					.getVariableField(IProjectVariables.MAIN, IProjectVariables.MAIN_FIELD_USER_LANGUAGE_OBJ)
					.getObjectValue();
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Store user language | userinfo: " + userinfo);
			String userLanguage = String.valueOf(languageENUM);

			if (userinfo != null && userinfo.getLanguage() != null && userinfo.getMobileNumber() != null) {
//						insertHindiLanguage(mySession, userinfo);

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Store user language |  userinfo.getLanguage(): " + userinfo.getLanguage());

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Store user language |  userLanguage: " + userLanguage);
				
				if (userinfo.getLanguage() != null) {
					String language = userinfo.getLanguage();
					String[] split = language.split(",");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
							"Store user language | split array: " + split.toString());
					List<String> asList = Arrays.asList(split);
					if (asList.size() >= 1) {
						userLanguage = language.concat(",").concat(String.valueOf(languageENUM));
						String[] split2 = userLanguage.split(",");
						List<String> asList2 = Arrays.asList(split2);
						
						if (asList2.size() > 3) {
							List<String> list3=new ArrayList<String>(asList2);
							String remove = list3.remove(0);
							mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
									"Store user language | remove: " + remove);
							userLanguage = String.join(",", list3);
						}
					}

				}
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Store user language | userLanguage: " + userLanguage);
				String mobNum=userinfo.getMobileNumber();
				if (mobNum==null) {
					mobNum=ani;
				}
				
				postEntity = "{\n" + "    \"mobileNumber\": \"" + mobNum + "\",\n"
						+ "    \"language\": \"" + userLanguage + "\"\n" + "}";
			} else {
				
				postEntity = "{\n" + "    \"mobileNumber\": \"" + ani + "\",\n"
						+ "    \"language\": \"" + userLanguage + "\"\n" + "}";
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Store user language | user language info is null, inserting new data: " + userinfo);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
						"Store user language | user language |  inserting new data: " + postEntity);
			}
		} else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
					"Store user language | user language object is null: " + objectValue);
		}

		return postEntity;
	}

//	private String insertHindiLanguage(com.avaya.sce.runtimecommon.SCESession mySession, UserLanguage userinfo) {
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Store user language |  userinfo.getLanguage(): " +  userinfo.getLanguage());
//		
//		String userLanguage=String.valueOf(LanguageENUM.HI);
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Store user language | Hindi userLanguage: " + userLanguage);
//		if (userinfo.getLanguage()!=null) {
//			String language = userinfo.getLanguage();
//			String[] split = language.split(",");
//			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//					"Store user language | Hindi split arra: " + split);
//			List<String> asList = Arrays.asList(split);
//			if (asList.size()>=1) {
//				userLanguage=language.concat(",").concat(String.valueOf(LanguageENUM.HI));
//			}
//			
//		}
//		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,
//				"Store user language | Hindi userLanguage: " + userLanguage);
//		
//		String postEntity = "{\n" + "    \"mobileNumber\": \"" + userinfo.getMobileNumber() + "\",\n"
//				+ "    \"language\": \"" + userLanguage + "\"\n" + "}";
//		
//		return postEntity;
//	}
	
	
	private static Properties loadPropertyFile(String config) throws FileNotFoundException, IOException {
		FileReader reader = null;
		reader = new FileReader(config);
		Properties properties = new Properties();
		properties.load(reader);
		return properties;
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-SEP-05  01:01:26 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("MENU1", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
